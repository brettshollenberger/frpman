function socketToObservable(socket) {
  return Rx.Observable.create(function(observer) {
    var subscribed = true;

    socket.onmessage = function(message) {
      if (subscribed) {
        observer.onNext(message.data);
      }
    }

    return function() {
      subscribed = false;
      socket.close();
    }
  });
}

var scheme       = '<%= @scheme %>',
    uri          = scheme + document.location.host + "/",
    ws           = new WebSocket(uri),
    socketStream = socketToObservable(ws).map(function(response) {
      return JSON.parse(response);
    }),
    display      = $("#the_num");

socketStream
  .forEach(function(n) {
    console.log(n);
  });

function toSocketRequest(method, url, body) {
  return JSON.stringify({
    headers: {
      method: method,
      url   : url
    },
    body: body
  });
}

// POST new game
(function(){
  var createRoom = $('#create-room').toObservable('click'),
      getRooms   = $('#get-rooms').toObservable('click'),
      roomCreated = socketStream.filter(function(response) {
        return response.headers.method == "post" && response.headers.url == "/rooms";
      });

  roomCreated.subscribe(function(roomCreated) {
    console.log("ROOM CREATED!!");
    console.log(roomCreated);
  });

  getRooms.map(function() {
    return toSocketRequest("GET", "/rooms", {});
  }).subscribe(function(request) {
    ws.send(request);
  });

  createRoom.map(function(){
    return $('#room-name').val()
  })
  .map(function(roomName) {
    return toSocketRequest("POST", "/rooms", { name:roomName });
  })
  .subscribe(function(request){
    ws.send(request);
  },function(error){
  
  },function(){});
})()


